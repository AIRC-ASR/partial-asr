import torch
import json
from transformers import WhisperProcessor, WhisperForConditionalGeneration
from datasets import load_dataset
from tqdm import tqdm

processor = WhisperProcessor.from_pretrained("openai/whisper-small.en")
model = WhisperForConditionalGeneration.from_pretrained("openai/whisper-small.en").to("cuda")

# Resource: https://huggingface.co/blog/how-to-generate
data = []
NUM_HYPOTHESES = 5
NUM_DATA_POINTS = 2939 # 2939
instruction = f"Perform error correction on the top{NUM_HYPOTHESES} outputs generated by an Automatic Speech Recognition (ASR) system. The ASR hypotheses, listed in order of their ASR posterior score, are as follows:"
dataset = load_dataset("librispeech_asr", "all", split="train.clean.100", cache_dir="/home/omarc/mounts/NLUG/home/scratch/partial-asr/datasets")
for example in tqdm(dataset, total=NUM_DATA_POINTS):
  if len(data) == NUM_DATA_POINTS:
    break

  audio = example["audio"]
  input_features = processor(audio["array"], sampling_rate=audio["sampling_rate"], return_tensors="pt").input_features
  output = processor.tokenizer._normalize(example["text"])
  id_ = example["id"]
  with torch.no_grad():
    beam_outputs = model.generate(
      input_features.to("cuda"),
      num_beams=NUM_HYPOTHESES,
      num_return_sequences=NUM_HYPOTHESES,
      max_new_tokens=256,
      early_stopping=True
    )

  input_text = ""
  for i, beam_output in enumerate(beam_outputs):
    hypothesis = f"<hypothesis{i + 1}>" + processor.tokenizer._normalize(processor.decode(beam_output, skip_special_tokens=True)) + f"</hypothesis{i + 1}>\n"
    input_text += hypothesis

  input_text += "\nPlease provide the corrected top1 ASR transcription of the given utterance only, do not add any explanations or other words."
  data_point = {
    "instruction": instruction,
    "input": input_text,
    "output": output,
  }
  data.append(data_point)

with open('~/scratch-shared/librispeech-data/original/test-other.json', 'w') as json_file:
  json.dump(data, json_file)

"""
>>> instruction="Perform error correction on the top3 outputs generated by an Automatic Speech Recognition (ASR) system. The ASR hypotheses, listed in order of their ASR posterior score, are as follows:"
>>> input="<hypothesis1> he grasped the little passing </hypothesis1>\n<hypothesis2> he grasped the little parcel </hypothesis2>\n<hypothesis3> he grasped the little puzzle </hypothesis3>\n\nPlease provide the corrected top1 ASR transcription of the given utterance only, do not add any explanations or other words."
>>> prompt_input=f"{instruction}\n\n{input}"
>>> print(prompt_input)
Perform error correction on the top3 outputs generated by an Automatic Speech Recognition (ASR) system. The ASR hypotheses, listed in order of their ASR posterior score, are as follows:

<hypothesis1> he grasped the little passing </hypothesis1>
<hypothesis2> he grasped the little parcel </hypothesis2>
<hypothesis3> he grasped the little puzzle </hypothesis3>

Please provide the corrected top1 ASR transcription of the given utterance only, do not add any explanations or other words
"""
